TITLE:: OFX_OutputFX
summary:: a configurable chain of effects on the main outputs of a server
categories:: Control>Effects
related:: Classes/OFX_Chain

Description::

A OFX_OutputFX can apply effects to the main output channels of a server. One can only make a single OFX_OutputFX for each server. Each OFX_OutputFX contains a link::Classes/OFX_Chain:: which handles the named effects slots and their state.

First examples:

code::
(
s.boot;

// define which FX are going to be used.
// As OFX_OutputFX is based on OFX_Chain, these FX are the same as in OFX_Chain.
OFX_Chain.add3(
	\leakDC,  \filter -> { |in, leak=0.99| LeakDC.ar(in, leak) },
	1,
	(\leak: [0.5, 0.999, \exp])
);
OFX_Chain.add3(
	\rollClip, \filter -> { |in, clip=0.99, pole=0.2|
		OnePole.ar(in.clip2(clip), pole ** 0.7);
	},
	1,
	(
		\clip: [0.0, 1, \amp],
		\pole: [0, 0.95, \lin]
	)
);
OFX_Chain.add3(
	\krush, \filter -> { |in, bits=16, downsamp=2|
		var krushStep = 0.5 ** (bits + 1);
		var down = Latch.ar(in, Impulse.ar(SampleRate.ir / downsamp.max(2)));
		// below 1/2 downsamp, do xfade:
		blend(in, down, (downsamp - 1).clip(0, 1))
		.round(krushStep);
	},
	1,
	(
		\bits: [16, 1],
		\downsamp: [1, 100, \exp]
	)
);

OFX_Chain.add3(
    \slap, \filterIn -> { |in, dtl = 0.25, dtr = 0.375, decay = 3|
		CombL.ar(in, 1.0, [dtl, dtr], decay)
	},
    0.2,
    (dtl: [0, 1], dtr: [0, 1], decay: [1, 200, \exp])
);

OFX_Chain.add3(
    \comb, \filterIn -> { |in, decay = 3| CombL.ar(in * 0.3, 0.02, [0.03, 0.042], decay) },
    0.2,
    (decay: [0.2, 200, \exp])
);


OFX_Chain.add3(
	\ampFin, \filter -> { |in, drive=1, ampLimit=0.8 |
		Limiter.ar(in * drive, ampLimit);
	},
	1,
	(
		\drive: [1, 10, \exp],
		\ampLimit: \amp
	)
);
);


(
// An 8-channel OFX_OutputFX on server s.
// The order in slotNames determines order of execution of the efx.
m = OFX_OutputFX.new(server: s,
	numChannels: 8,
	slotNames: [\leakDC, \krush, \rollClip, \ampFin],
	busIndex: 0
);

s.scope(8);
)

// a test signal
x = { PinkNoise.ar(0.5) + SinOsc.ar([220, 330]) * LFNoise2.kr([5, 8, 13, 21]).max(0); }.play;

// all OFX_OutputFX live here:
OFX_OutputFX.all;

// kick in predefined effects (at full wet level)
m.add(\leakDC, 1);
m.set(\leak, 0.8); // filter lows

m.add(\krush, 1);  // bitcrush, downsample
m.set(\bits, 5, \downsamp, 6);

m.add(\ampFin, 1);  // limit output
m.set(\drive, 10, 0.3);

// kick out predefined effects (at full wet level)
m.remove(\leakDC);
m.remove(\rollClip);
m.remove(\krush);
m.remove(\ampFin);

// remove currently unused settings
m.proxy.cleanNodeMap;

// change slotNames - only while slots are off :
m.slotNames;
// this is -> Order[\leakDC, \krush, \rollClip, \ampFin]

// drop rollClip from the list:
m.slotNames = [\leakDC, \krush, \ampFin];


// remove a OFX_OutputFX by server name
OFX_OutputFX.clear(\localhost); // clear one specific mainFX

// or simply by
m.clear

// or clear all OFX_OutputFX
OFX_OutputFX.clear;

OFX_OutputFX.all;
::


CLASSMETHODS::

private:: initClass, make

METHOD:: all
dictionary for all mainFX, one per server.

METHOD:: default
the OFX_OutputFX instance for the default server.

METHOD:: maxNumChans
the maximum number of channels supported. (currently unused)

METHOD:: clear
clear the mainFX at name
ARGUMENT:: name


METHOD:: new

ARGUMENT:: server
the server on which the OFX_OutputFX chain will run; default is server.numOutputBusChannels

ARGUMENT:: numChannels
the number of channels it will work on

ARGUMENT:: slotNames
the names of the filters/functions to be used, in order of execution;

ARGUMENT:: busIndex
the bus index where it will process audio.


INSTANCEMETHODS::

METHOD:: key
the key at which the mainFX is stored; usually this is the server name.

METHOD:: proxyChain
the link::Classes/OFX_Chain:: that has the order of the effects that can be used

METHOD:: proxy
the link::Classes/NodeProxy:: inside the the proxyChain.

subsection::Methods that get forwarded to proxyChain/proxy:

METHOD:: add
kick in effect
ARGUMENT:: key
name of effect
ARGUMENT:: wet
wet-level of effect
ARGUMENT:: func
an optional func that can locally replace the global func with that name.

METHOD:: remove
kick out effect
ARGUMENT:: key
name of effect

Method:: set
set named parameters of the active slots

Method:: slotsInUse
get the currently used slots of the proxyChain
Method:: slotNames
get and set the slotNames of the proxyChain

METHOD:: server
the server on which this OFX_OutputFX operates

METHOD:: numChannels
the number of output channels of the OFX_OutputFX

METHOD:: busIndex
the index of the bus on which the OFX_OutputFX operates

METHOD:: group
the group in which this mainFX proxy runs.
this is after the default group.


METHOD:: checkingBadValues
flag whether the mainFX is checking the final output for bad values.
see also link::Classes/CheckBadValues::

METHOD:: checkBad
set flag whether to check final output, and if needed start the synth

METHOD:: badSynth
the synth that does the bad value checking.

METHOD:: wakeUp
Wake up the OFX_OutputFX proxy. This happens automatically after CmdPeriod.

METHOD:: clear
clear this OFX_OutputFX; usually so one can remake it.


private:: cmdPeriod, makeGroup, makeName, makeBus

METHOD:: pxChain
alias for the proxyChain (the proxyChain inst var was called pxChain earlier).


METHOD:: show, hide
show or hide the OFX_OutputFX proxy in Ndef.all for that server.
the proxy is hidden by default.


METHOD:: gui
Not implemented yet

ARGUMENT:: name
the name the gui will show

ARGUMENT:: numItems
the number of buttons / sliders for parameters the gui will have

ARGUMENT:: buttonList
an optional list of buttons. by default, this is the list of slotNames.

ARGUMENT:: parent
the parent view or window on which to place the gui
ARGUMENT:: bounds
the bounds of the gui

ARGUMENT:: makeSkip
a flag whether to make and start a skipjack for the gui update mechanism.

EXAMPLES::
code::
// An example for setting up shared controls between slots:
// volume levels of both a slap delay and a comb reverb are scaled by \globalwet.
(
// first, add global spec for \globalwet:
Spec.add(\globalwet, [0, 4, \amp]);

// then make a dummy first slot function that has all global controls,
OFX_Chain.add3(
	\globalz, { |globalwet = 1|
		// but does not add any sound to the proxychain:
		Silent.ar
	}
);

// add slap delay that uses globalwet scaler
OFX_Chain.add3(
    \slap, \filterIn -> { |in, globalwet = 1, dtl = 0.25, dtr = 0.3333|
		DelayN.ar(in.reverse * globalwet, 1.0, [dtl, dtr])
	},
    0.38,
    (dtl: [0, 1], dtr: [0, 1], decay: [1, 200, \exp])
);

// add simple comb reverb that uses globalwet scaler
OFX_Chain.add3(
	\comb, \filterIn -> { |in, globalwet = 1, decay = 3|
		CombL.ar(in * (0.3 * globalwet), 0.02, LFDNoise3.kr(0.1!2).range(0.01, 0.03), decay)
	},
    0.38,
    (decay: [0.2, 200, \exp])
);

// make a OFX_OutputFX that uses globals
OFX_OutputFX.clear('localhost');
m = OFX_OutputFX.new(server: s,
	numChannels: 2,
	slotNames: [\globalz, \something, \slap, \other, \comb, \final],
	busIndex: 0
);
///// add globalz by default!
m.add(\globalz);

)

// NOW, test globalwet control:
// run a simple test sound
x = { Splay.ar(Ringz.ar(Impulse.ar(0.3 * [2, 3, 5]), [2, 3, 5] * 300, 0.5/[2, 3, 5])) }.play;

m.add(\slap, 0.38); // turn on slapback
m.set(\globalwet, 0.5); // drier
m.set(\globalwet, 2); // wetter
m.set(\globalwet, 1); // normal

m.add(\comb, 0.38); // turn on comb
m.set(\globalwet, 0.25); // much drier, slap and comb!
m.set(\globalwet, 2); // wetter
m.set(\globalwet, 1); // normal again

::
