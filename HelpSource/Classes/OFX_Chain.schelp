TITLE:: ProxyChain
summary:: play ordered synth and filter functions flexibly in one proxy
categories:: Libraries>JITLib>JITLibExtensions
related:: Classes/NodeProxy, Classes/Ndef, Classes/ProxyChainGui, Classes/MasterFX, Overviews/JITLib

DESCRIPTION::
A ProxyChain is a wrapper around a nodeproxy which keeps an ordered collection of sound functions, which can be individually added to or removed from the proxy signal chain, by name.

The ProxyChain class keeps a global dictionary of such sound functions, and a ProxyChain can also have local sound functions.

Like Ndef, Pdef, Tdef, the ProxyChain class keeps all named instances in a class variable code::ProxyChain.all:: where they can be accessed by name: code::ProxyChain('chain1')::.

subsection:: First Examples

Basic code-only usage first:

code::
// add a sound source
ProxyChain.add(
	\dust, \mix -> { |dens=20, dustdec=0.02, dustfreq= 600|
		Ringz.ar(Dust.ar(dens).lag(0.0001), dustfreq, dustdec)
	}
);

// add some effects, using NodeProxy roles:
// an association with \filter becomes a filter,
// and creates a wet/dry balance on the output.
// several funcs can be added as key1, func1, key2, type -> func2, etc.
ProxyChain.add(
	\dist, \filter -> { |in, drive=10, amp=0.2| (in * drive).tanh * amp },
	\ringmod, \filter -> { |in, randrate=5|
		// in a filter, 'in' is the signal on the bus
		in.asArray[0] 	// force mono inputs
		* SinOsc.ar(LFNoise0.kr([randrate, randrate]).exprange(300, 3000)).sum
	},
	\comb, \filterIn -> { |in, decay = 3| CombL.ar(in, 0.02, [0.03, 0.042], decay) },
	\ampFin, \filter -> { |in, drive=1, ampLimit=1|
		Limiter.ar(in * drive, ampLimit);
	}
);

// the sound functions are here now:
ProxyChain.allSources

// now make a ProxyChain that uses them:
ProxyChain(\test).clear;
ProxyChain(\test, [\dust, \dist,\ringmod,\comb, \ampFin]);

// access by name
ProxyChain(\test);

// warns that it cannot reset ProxyChain from 'new' method
ProxyChain(\test, [\dust, \dist,\ringmod, \ampFin]);

// tell the proxy to play
ProxyChain(\test).play;

// kick in a source  with a mix level
ProxyChain(\test).add(\dust, 0.2)

// and an effect with a wet/dry level
ProxyChain(\test).add(\ringmod, 0.7)

ProxyChain(\test).add(\comb, 0.2)

// set effects parameters
ProxyChain(\test).set(\decay, 10);

// set proxy fadetime
ProxyChain(\test).proxy.fadeTime = 3;

// remove fx and source by fadeout
ProxyChain(\test).remove(\ringmod)

ProxyChain(\test).remove(\comb)

ProxyChain(\test).remove(\dust)

// make a gui to see its state:
ProxyChain(\test).gui;
::
Note:: When using ProxyChains with GUIs and controllers, things become much easier when specs for the process parameters are defined along with the processes. One can do this by adding global specs (code:: Spec.add(\dens, [1, 100, \exp])::s), or by adding specs to the ProxyChain's proxy.
ProxyChain also supports defining these specs when setting up the repertoire of functions.
::

code::
(	// add a sound source and its specs together:
ProxyChain.add3(
	\dust, \mix -> { |dens=20, dustdec=0.02, dustfreq= 600|
		Ringz.ar(Dust.ar(dens).lag(0.0001), dustfreq, dustdec)
	},
	0.2, // default playing level,
	// spec can be an array of key, value, key, value, or a dictionary
	[
		\dens, [1, 1000, \exp],
		\dustdec, [0.00001, 0.1, \exp],
		\dustfreq, [30, 15000, \exp]
	]
);

ProxyChain.add3(
	\dist, \filter -> { |in, drive=10, amp=0.2| (in * drive).tanh * amp },
	1.0,
	( drive: [1, 10, \amp] )
);

ProxyChain.add3(
	\ringmod, \filter -> { |in, randrate=5|
		// in a filter, 'in' is the signal on the bus
		in.asArray[0] 	// force mono inputs
		* SinOsc.ar(LFNoise0.kr([randrate, randrate]).exprange(300, 3000)).sum
	},
	0.5,
	[randrate: [0.2, 200, \exp]]
);

ProxyChain.add3(
	\comb, \filterIn -> { |in, decay = 3| CombL.ar(in * 0.3, 0.02, [0.03, 0.042], decay) },
	0.2,
	(decay: [0.2, 200, \exp])
);

ProxyChain.add3(
	\ampFin, \filter -> { |in, drive=1, ampLimit=1|
		Limiter.ar(in * drive, ampLimit);
	},
	1,
	( drive: [1, 10, \amp], ampLimit: [0.5, 1] )
);
)

// ... and now the gui uses these specs:
ProxyChain(\test, [\dust, \dist,\ringmod,\comb, \ampFin]);
g = ProxyChain(\test).gui;

// slotNames can be changed while they are off, and the gui will show it

ProxyChain(\test).slotNames = [\dust,\ringmod,\comb, \ampFin];

::

CLASSMETHODS::

METHOD:: allSources
a dict of all available synth and filter functions

METHOD:: all
a dict of all ProxyChain instances.

METHOD:: add
put synth functions into code::ProxyChain.all::, by name, func, name, func ...

METHOD:: add3
add a named synth func with level and specs

METHOD:: addSource
add a source func at srcName
METHOD:: addLevel
add a default level for the func at srcName
METHOD:: addSpecs
add specs for the func at srcName

METHOD:: sourceDicts
access the dict which contains all sourceDicts

METHOD:: atSrcDict
get the srcDict at given srcName

METHOD:: checkDicts
check all sourceDicts for integrity

METHOD:: checkSourceDictAt
check the sourceDict at srcName


METHOD:: new
look up an existing ProxyChain, or (if new and slotNames are given),
make a new ProxyChain with ordered names of synth functions in the slotNames.

code::
// the functions can be sources (func, \mix -> func)
// or filters (\filter -> func, \filterIn -> func)
(
c = ProxyChain(\alpha, [\dust, \ringmod, \dist, \comb]);
c.play;	// play the proxy
g = c.gui(12);	// make a gui for it with 12 slots - see ProxyChainGui
)
c.add(\dust);
::

ARGUMENT:: key
lookup name for the proxychain

ARGUMENT:: slotNames
the names of the functions to have available.

ARGUMENT:: numChannels
number of audio channels. default = 2.

ARGUMENT:: server
server to use. default = s.


METHOD:: from
like new, but using an existing NodeProxy or Ndef

code::
Ndef(\bla).ar(2);
ProxyChain.from(Ndef(\bla), [\dust, \ringmod, \dist, \comb, \ampFin]);
ProxyChain(\bla).play;
ProxyChain(\bla).add(\dust);


ProxyChain.all;
::

INSTANCEMETHODS::

METHOD:: key
the key under which the proxyChain is stored in code::ProxyChain.all ::

METHOD:: sources
an optional dict of local source funcs - these will override source funcs with the same name in code::ProxyChain.all::


METHOD:: proxy
the proxy inside the chain

subsection::methods that get forwarded to proxy

METHOD:: play
METHOD:: playN
METHOD:: stop
METHOD:: end

METHOD:: set

subsection::de/activating slots

METHOD:: add
kick in a source by name, with a mix level

code::
c.add(\dust, 0.123);
c.add(\dust, 0.2);
c.add(\ringmod, 0.5);
c.add(\dist, 1);
::

ARGUMENT:: key
which function to kick in

ARGUMENT:: wet
wet/dry mix ratio

ARGUMENT:: func
an optional func that can locally replace the global func with that name.

METHOD:: remove
remove a currently playing source by name.
code::
c.remove(\dist);
c.remove(\ringmod);
c.remove(\riseComb5);
::

METHOD:: setSlots
set (add or remove) multiple slots at once.

subsection:: configuration & introspection

METHOD:: slotNames
get slotNames, change to new slotNames.
Note:: Changing slotNames only works predictably when all slots are turned off!::

METHOD:: slotsInUse
the names of the currently playing slots.

METHOD:: activeSlotNames
get the currently active slot names
METHOD:: getCurr
get the current settings (for the optional slotNames given)

METHOD:: keysAt
get all keys at slotName

METHOD:: keysValuesAt
get all keys and values at slotName


METHOD:: gui
make a ProxyChainGui for the ProxyChain - see examples.

code::
// by default, buttonList nil is replaced with control buttons for all slots.
c.gui(20);

// if specified, can be friendlier
(
g = c.gui(20,
	[
		[ \generators, \label ],  	// a label only
		[ \dust, \slotCtl, 0.25 ], 		// a control for a slot, starting level

		[ '1 > 1', \label ],
		[ \ringmod, \slotCtl ], 		// 0 - dry  by default
		[ \dist, \slotCtl, 1 ], 		// 1 - all wet

		[ '1 > 5', \label ],
		[ \riseComb5, \slotCtl ],
		// extras:
		// e.g. an NdefGui with more space for param controls
		[\phatEdit, \extra, { c.proxy.gui(40) } ],

		// or maybe bigger buttons for play and end?
		[\play, \extra, { c.playN.postln } ],
		[\end, \extra, { c.end(2, true) } ],

	]
)
)
::

private:: addSlot, orderIndexFor, slotIndexFor

EXAMPLES::

Replacing a slot and reordering slots:

code::

// take proxychain from above:
ProxyChain(\test);
// which has these slotnames
ProxyChain(\test).slotNames

->  Order[ dust, dist, ringmod, comb, ampFin ]

// while no slots are active, switch to new slotNames:
ProxyChain(\test).slotNames = [ \dust, \ringmod, \dist, \comb5, \ampFin ];

// make a gui for it - it has the new order
g = ProxyChain(\test).gui;

(
// Add \comb5 now, after using its name in ProxyChain
// -- this is a formlet-like reverb that fades in slowly

ProxyChain.add3(
	\comb5, \filterIn -> { arg in, delayScale = 1, decay = 5, dlDrift = 0.1;
		var combs;
		delayScale = delayScale.lag2(1);
		dlDrift = dlDrift.lag2(1);

		combs = [0.05, 0.08, 0.13, 0.21, 0.34].collect { |dt|
			var drift = LFDNoise3.kr(0.3, dlDrift, 1);
			CombL.ar(in, 0.7, dt * drift * delayScale, decay)
		};
		Splay.ar(combs)
	},
	0.2,
	(
		\delayScale: [0.1, 1, \exp],
		\decay: [0.3, 300, \exp],
		\dlDrift: [0, 0.8, \amp]
	)
);
)

// now try kicking it in from the gui...

::
